generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String       @id @default(uuid())
  name      String       @unique
  createdAt DateTime     @default(now())
  users     TenantUser[]
  projects  Project[]
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  tenants       TenantUser[]
  userDetail    UserDetail?
  refreshTokens RefreshToken[]
  Notification  Notification[]

  ChatParticipant ChatParticipant[]

  Message Message[]

  ProjectUser ProjectUser[]

  TaskAssignee TaskAssignee[]
}

model TenantUser {
  userId   String
  tenantId String
  role     TenantRole @default(TENANT_MEMBER)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
}

enum TenantRole {
  TENANT_MEMBER
  TENANT_ADMIN
  TENANT_OWNER
}

model UserDetail {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  firstName String?
  lastName  String?
  phone     String?
  address   String?
}

model Project {
  id        String   @id @default(uuid())
  name      String
  tenantId  String
  createdAt DateTime @default(now())

  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  boards      Board[]
  ChatRoom    ChatRoom[]
  ProjectUser ProjectUser[]

  @@unique([tenantId, name])
}

model ProjectUser {
  userId    String
  projectId String
  role      ProjectRole @default(PROJECT_MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  joinedAt DateTime @default(now())

  @@id([userId, projectId])
}

enum ProjectRole {
  PROJECT_MEMBER
  PROJECT_ADMIN
  PROJECT_OWNER
}

model Board {
  id        String   @id @default(uuid())
  name      String
  projectId String
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@unique([projectId, name])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  boardId     String
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now())
  deadline    DateTime?

  board        Board          @relation(fields: [boardId], references: [id], onDelete: Cascade)
  TaskAssignee TaskAssignee[]

  @@unique([boardId, title])
  @@index([deadline])
  @@index([status])
}

model TaskAssignee {
  userId String
  taskId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([userId, taskId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  createdAt DateTime         @default(now())
  read      Boolean          @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  TASK_DEADLINE
  PAYMENT_BILLING
}

model ChatRoom {
  id        String   @id @default(uuid())
  projectId String   @unique
  createdAt DateTime @default(now())

  project      Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages     Message[]
  participants ChatParticipant[]
}

model ChatParticipant {
  userId     String
  chatRoomId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  joinedAt DateTime @default(now())

  @@id([userId, chatRoomId])
}

model Message {
  id         String   @id @default(uuid())
  chatRoomId String
  senderId   String
  content    String
  createdAt  DateTime @default(now())

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender   User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
