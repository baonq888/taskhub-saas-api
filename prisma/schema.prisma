generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  users     TenantUser[]
  projects  Project[]

}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)  
  createdAt DateTime @default(now())
  tenants   TenantUser[]
  userDetail UserDetail?
  refreshTokens RefreshToken[]
  assignedTasks Task[] @relation("UserTasks") 

  Notification Notification[]

  ChatParticipant ChatParticipant[]

  Message Message[]

  ProjectUser ProjectUser[]
}

model TenantUser {
  userId   String
  tenantId String
  role     Role     @default(USER) 

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
}

model UserDetail {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  firstName String?
  lastName  String?
  phone     String?
  address   String?
}


model Project {
  id        String   @id @default(uuid())
  name      String
  tenantId  String
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  boards    Board[]

  @@unique([name, tenantId])
  ChatRoom ChatRoom[]
  ProjectUser ProjectUser[]
}

model ProjectUser {
  userId    String
  projectId String
  role      Role @default(USER) // Optional: Define roles within projects

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  joinedAt  DateTime @default(now())

  @@id([userId, projectId])
}

model Board {
  id         String   @id @default(uuid())
  name       String
  projectId  String
  createdAt  DateTime @default(now())

  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks      Task[]

  @@unique([name, projectId])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  boardId     String
  assignedTo  String?  
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now())
  deadline    DateTime? 

  board      Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  assignee   User?    @relation(fields: [assignedTo], references: [id], onDelete: SetNull, name: "UserTasks")

  @@unique([title, boardId])
  @@index([deadline])
  @@index([status])     
  @@index([assignedTo]) 
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum Role {
  USER
  ADMIN
  TENANT_ADMIN
  PROJECT_ADMIN
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  type        NotificationType
  message     String
  createdAt   DateTime @default(now())
  read        Boolean  @default(false)

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  TASK_DEADLINE
  PAYMENT_BILLING
}

model ChatRoom {
  id         String    @id @default(uuid())
  projectId  String
  createdAt  DateTime  @default(now())

  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages   Message[]
  participants ChatParticipant[]
}

model ChatParticipant {
  userId     String
  chatRoomId String

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  joinedAt   DateTime  @default(now())

  @@id([userId, chatRoomId])
}

model Message {
  id         String    @id @default(uuid())
  chatRoomId String
  senderId   String
  content    String
  createdAt  DateTime  @default(now())

  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender     User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
}